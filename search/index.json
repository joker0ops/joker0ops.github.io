[{"content":"问题如下： 实现如下迷宫的自动寻路，以圆圈为迷宫入口，以五角星为迷宫出口，打印出完整的走迷宫路径。 为了表示迷宫，我们设置一个二维数组mg，其中每个元素代表一个方位的状态，我们定义0为通路，1为墙，-1为已走过的路，通过堆栈保存当前路径，找到一条可行的路径。\n算法如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 将入口(xi,yi)进栈并将其初始方位向量di设置为-1：mg[xi][yi]=-1； while(栈不空) {\t取栈顶方块并判断是否为出口 若是出口则打印路径 return true; free(s); 若不是则查找当前块的下一个相邻可走方块； if(找到一个) { 该方块为(i1,j1)，栈顶方块对应方位更改为di； 找到的方块进栈； mg[i1][j1]=-1; } if(没有找到) 将当前方块退栈； //注意退栈后不能将此方块状态置零，否则会陷入死循环 } return false; 代码实现： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 #include\u0026lt;stdio.h\u0026gt; #include\u0026lt;stdlib.h\u0026gt;//记住这个头文件，malloc函数和free函数都离不开它 #define MaxSize 100//定义顺序栈最大空间 typedef struct{ int i;//当前方块的行号 int j;//当前方块的列号 int di;//方块方向属性 }Box;//定义路径属性 typedef struct{ //栈保存当前路径 Box data[MaxSize]; int top; }sqstack; //地图 int mg[10][10]= {{1,1,1,1,1,1,1,1,1,1}, {1,0,0,1,0,0,0,1,0,1}, {1,0,0,1,0,0,0,1,0,1}, {1,0,0,0,0,1,1,0,0,1}, {1,0,1,1,1,0,0,0,0,1}, {1,0,0,0,1,0,0,0,0,1}, {1,0,1,0,0,0,1,0,0,1}, {1,0,1,1,1,0,1,1,0,1}, {1,1,0,0,0,0,0,0,0,1}, {1,1,1,1,1,1,1,1,1,1}}; //压栈 bool push(sqstack * \u0026amp;s,Box e){ if(s-\u0026gt;top==MaxSize-1) return false; s-\u0026gt;top++; s-\u0026gt;data[s-\u0026gt;top]=e; return true; } //退栈 bool pop(sqstack * \u0026amp;s,Box \u0026amp;e){ if(s-\u0026gt;top==-1) return false; e=s-\u0026gt;data[s-\u0026gt;top]; s-\u0026gt;top--; return true; } //求解路径为(xi,yi)-\u0026gt;(xe,ye) bool mgpath(int xi,int yi,int xe,int ye){\t//定义栈s sqstack *s; s=(sqstack * )malloc(sizeof(sqstack)); //初始化栈顶指针 s-\u0026gt;top=-1; Box e; //将起点压栈并将状态记录为-1（已走） mg[xi][yi]=-1; e.i=xi;e.j=yi;e.di=-1; push(s,e); mg[xi][yi]=-1; //栈不空时循环 while(s-\u0026gt;top!=-1){ e=s-\u0026gt;data[s-\u0026gt;top]; //找到出口，输出该路径 if(e.i==xe\u0026amp;\u0026amp;e.j==ye){ printf(\u0026#34;这是一条路径：\\n\u0026#34;); for(int k=0;k\u0026lt;=s-\u0026gt;top;k++) { printf(\u0026#34;(%d,%d) \u0026#34;,s-\u0026gt;data[k].i,s-\u0026gt;data[k].j); if((k+1)%5==0) printf(\u0026#34;\\n\u0026#34;); } free(s); //输出一条路径后返回true并销毁数据栈 return true; } int i,j,di; i=e.i;j=e.j;di=-1; int x=i,y=j; //不是出口则继续查找 while(di\u0026lt;=3) { di++; if(di==0){ x=i-1; y=j; } else if(di==1){ x=i; y=j+1; } else if(di==2){ x=i+1; y=j; } else{ x=i; y=j-1; } //找到相邻可走方块 if(mg[x][y]==0)break; } if(mg[x][y]==0){ s-\u0026gt;data[s-\u0026gt;top].di=di;//修改原栈顶元素di值 e.i=x;e.j=y;e.di=-1; push(s,e);//相邻可走方块e进栈 mg[x][y]=-1;//将状态记录为-1（已走），防止重复 } else{ pop(s,e);//没有路径可走，将当前方块退栈 //mg[e.i][e.j]=0;//注意这里我专门注释掉的部分，不可以置0 } } free(s); return false;//无路可走，销毁栈 } int main(){ if(!mgpath(1,1,8,8)) printf(\u0026#34;该迷宫无解！\u0026#34;); return 0; } 实现结果： ","date":"2023-03-27T23:56:05+08:00","image":"https://joker0ops.github.io/img/84.jpg","permalink":"https://joker0ops.github.io/p/c%E8%AF%AD%E8%A8%80%E6%B1%82%E8%A7%A3%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98dfs/","title":"C语言求解迷宫问题(DFS)"},{"content":"选择排序（C语言实现） 实现原理： 给出一组数据，第1轮在待排序记录r[1]-r[n]中选出最小的记录，将它与r[1]交换;第2轮在待排序记录r[2]-r[n]中选出最小的记录，将它与r[2]交换;以此类推，第i趟在待排序记录r[i]~r[n]中选出最小的记录，将它与r[i]交换，使有序序列不断增长直到全部排序完毕。\n代码 初始序列:{49 27 65 97 76 12 38}\n第1趟:12与49交换:12{27 65 97 76 49 38}\n第2趟:27不动 :12 27{65 97 76 49 38}\n第3趟:65与38交换:12 27 38{97 76 49 65}\n第4趟:97与49交换:12 27 38 49{76 97 65}\n第5趟:76与65交换:12 27 38 49 65{97 76}\n第6趟:97与76交换:12 27 38 49 65 76 97 完成\n括号内为无序区域，括号外为有序区；\n1 2 3 4 5 6 7 8 9 10 11 12 for(i=0;i\u0026lt;10;i++) { min=i; for(j=i+1;j\u0026lt;10;j++) { if(a[min]\u0026gt;a[j])//如果有一个值比开始的值小 min=j;//将最小的值j的序号给min } temp=a[min];//交换最最小值 a[min]=a[i]; a[i]=temp; } ","date":"2023-03-27T23:30:38+08:00","image":"https://joker0ops.github.io/img/86.png","permalink":"https://joker0ops.github.io/p/c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/","title":"C语言实现选择排序"},{"content":"1、快速排序 关于快速排序算法的思想其实非常简单，大家之前可能也接触过快排，但是一看这又有递归又有i,j的就很头大。然而，快排的基本思想其实就是“分治法”的一种应用：\n0 1 2 3 4 5 6 7 8 9 7 9 3 6 5 2 1 4 8 0 首先，对于这样一个无序数列，我们找到一个数作为基准数（一般是以第一个数为基准数），此处我们将基准数定为7。然后，我们分别从右向左找到一个比7小的数，接着从左向右找到一个比7大的数并将这两个数交换（注意一定是先从右向左找，请先自行思考下原因 ），此时数列将变为\n0 1 2 3 4 5 6 7 8 9 7 4 3 6 5 2 1 9 8 0 重复此步骤直到将整个序列扫描完\n0 1 2 3 4 5 6 7 8 9 7 4 3 6 5 2 1 9 8 0 此时左方指针和右方指针在1处相遇，然后我们将1与基准数7交换\n0 1 2 3 4 5 6 7 8 9 1 4 3 6 5 2 7 9 8 0 交换完成后，7左边的数均小于7右边的数，随后我们就用分治法的思想对7左边和右边的数列分别执行上述算法，直到不可拆分出新的子序列为止。这时我们的数列就排好啦\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 下面是快速排序的实现代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include\u0026lt;stdio.h\u0026gt; int a[10000],n;//定义全局变量 void quicksort(int left,int right) { int i,j,t,temp; if(left\u0026gt;right) return; temp=a[left];//将最左端的数定为基准数 i=left; j=right; while(i!=j) { //顺序很重要，要先从右往左找 while(a[j]\u0026gt;=temp \u0026amp;\u0026amp; i\u0026lt;j) j--; //再从左往右找 while(a[i]\u0026lt;=temp \u0026amp;\u0026amp; i\u0026lt;j) i++; //交换两个数在数组中的位置 if(i\u0026lt;j) { t=a[i]; a[i]=a[j]; a[j]=t;\t}\t} //最终将基准数归位 a[left]=a[i]; a[i]=temp; quicksort(left,i-1);//继续处理左边子序列，递归 quicksort(i+1,right);//继续处理右边子序列，递归\t} int main() { int i,j,t; //读入数据 scanf(\u0026#34;%d\u0026#34;,\u0026amp;n); for(i=1;i\u0026lt;=n;i++) scanf(\u0026#34;%d\u0026#34;,\u0026amp;a[i]); quicksort(1,n); for(i=1;i\u0026lt;=n;i++) printf(\u0026#34;%d \u0026#34;,a[i]); return 0; } 而对于之前提到的问题，不知道大家想到答案了没有？ 假设我们对下面这个序列进行快排，并且i先动\n0 1 2 3 4 3 1 2 5 8 按惯例我们将3定为基准数，i从左向右找大于3的数，当找到5时停止；此时j开始从右向左找，但是在寻找的过程中，j发现i在前面，而扫描的条件为 (i\u0026lt;j) 因此j只能跑到5这个位置停住。此时我们将3与5交换。对吗？5跑到比3小的子序列里了，错误就是在这里发生的，而先从右向左找就不会出现这个问题。因此，我们要选择基准数的远方开始扫描。\n2、冒泡排序 冒泡排序的思想相对于快速排序比较好理解：将比较大的数不断向后移（或比较小的数不断向后移，看实际需要），每次内循环都找到最大（或最小）的数并将其移动到序列最后一位并固定住，再对其前面的序列执行上述步骤。 代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include\u0026lt;stdio.h\u0026gt; int main() { int i,j,t,n; scanf(\u0026#34;%d\u0026#34;,\u0026amp;n); int a[n+1]; for(i=1;i\u0026lt;=n;i++) scanf(\u0026#34;%d\u0026#34;,\u0026amp;a[i]); for(i=1;i\u0026lt;=n-1;i++)\t//外循环控制子序列 { for(j=1;j\u0026lt;=n-i;j++) { if(a[j]\u0026gt;a[j+1]) { t=a[j]; a[j]=a[j+1]; a[j+1]=t;\t//内循环找到最大值并移至尾部固定 } } } for(i=1;i\u0026lt;=n;i++) printf(\u0026#34;%d \u0026#34;,a[i]); return 0; } 3、桶排序 这个排序算法其实并不是很常用，但是原理极为简单易懂，比较容易让人接受：想象我们有足够的空桶，每个桶上都有数字标号并按大小顺序排列好，此时我们遍历数组，当遇到数字与桶的标号相等时就向桶中放一个旗子，最后看有旗子的桶就可以了 代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include\u0026lt;stdio.h\u0026gt; int main() { int book[1001]={0};//将所有数字出现的次数置零 int i,j,t,n; scanf(\u0026#34;%d\u0026#34;,\u0026amp;n);//输入一个数，表示接下来有n个数 for(i=1;i\u0026lt;=n;i++) { scanf(\u0026#34;%d\u0026#34;,\u0026amp;t); book[t]++;//该数出现的次数加一 } for(i=1000;i\u0026gt;=0;i--)//从大到小查看每个数字 for(j=1;j\u0026lt;=book[i];j++)//该数字出现了几次就打印几次 printf(\u0026#34;%d \u0026#34;,i); return 0; } ","date":"2023-03-27T23:20:44+08:00","image":"https://joker0ops.github.io/img/87.jpg","permalink":"https://joker0ops.github.io/p/c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E6%A1%B6%E6%8E%92%E5%BA%8F/","title":"C语言实现快速排序、冒泡排序、桶排序"},{"content":"信息搜集目标： 服务器配置信息及网站的敏感信息：\n域名及子域名信息 目标网站系统 CMS指纹 目标网站真实IP 开放的端口 搜集域名及子域名信息 目标：\n该域名的注册信息 该域名的DNS服务器信息 注册人的联系信息等 常用方法： Whois查询：在kali系统中已经默认安装，其语法为：whois [域名] 在线Whois查询网站： 爱站工具网 站长之家 VirusTotal 备案信息查询： ICP备案查询网 天眼查 使用搜索引擎搜集敏感信息 | 关键字 | 说明 | | ******** | **************************************************** | | site | 指定域名 | | inurl | URL中存在关键字的网页 | | intext | 网页正文中的关键字 | | filetype | 指定文件类型 | | intitle | 网页标题中的关键字 | | link | link:baidu.com即表示返回所有和baidu.com做了链接的URL | | info | 查找指定站点的一些基本信息 | | cache | 搜索关于某些内容的缓存 |\n示例：site: edu.cn intext: 后台管理\n通过Burp Suite的Repeater功能同样可以获取一些服务器信息如运行的server类型及版本、PHP版本信息等\n通过GitHub上寻找数据库链接信息、邮箱密码、uc*key、阿里的osskey等敏感信息\n通过乌云漏洞表查询历史漏洞信息\n搜集子域名信息(一般主域网络规模较大且被重点防护，可以先从子域入手再一步步接近主域)\n子域名检测工具：\nLayer子域名挖掘机 Sublist3r subDomainsBrute(python subDomainsbrute.py XXX.com) 搜索引擎(site: XXX.com) 子域名爆破网站 IP反查绑定域名网站 DNSdumpster 各种在线DNS侦察和搜索工具 证书透明度公开日志枚举 crt.sh censys 搜索引擎搜索一些公开的CT日志 收集常用端口信息 Nmap Masscan ZMap 御剑高速TCP端口扫描工具 指纹识别：\n常见的CMS： Dedecms(织梦)、Discuz、PHPWEB、PHPWind、PHPCMS、ECShop、Dvbbs、SiteWeaver、ASPCMS、帝国、Z*Blog、WordPress CMS指纹识别代表工具：\n御剑Web指纹识别、WhatWeb、WebRobo、椰树、轻量WEB指纹识别 在线网站：\nBugScaner 云悉指纹 WhatWeb CDN：\n若目标服务器不存在CDN(内容分发网络)，则可以通过www.ip138.com获取目标的一些IP及域名信息 若不确定，可以通过ping目标的主域来观察域名的解析情况，从而判断是否使用了CDN；还可以利用在线网站[17CE(https://www.17ce.com)]进行全国多地区的ping服务器操作，然后对比各地区的IP结果，查看这些IP是否一致，若都是一样的，则极有可能不存在CDN，若大多不太一样或规律性很强，可以尝试查询IP归属地来判断 绕过CDN寻找真实IP：\n内部邮箱源 扫描网站测试文件 分站域名 国外访问Ａpp Synthetic Monitor 查询域名的解析记录NETCRAFT 若目标网站有自己的APP，可以通过Fiddler或Burp Suite抓取App的请求从而获取真实IP 绕过CloudFlare CDN查找真实IP：Cloud Flare Watch 验证获取的真实IP：对比域名访问和IP访问结果 收集敏感目录文件：\nDirBuster 御剑后台扫描珍藏版 wwwscan Spinder.py Sensitivefilescan Weakfilescan WebScan 社会工程学：\n社工库 还在初步学习阶段，会持续更新！！！ ","date":"2023-03-27T00:00:00Z","image":"https://joker0ops.github.io/img/83.jpg","permalink":"https://joker0ops.github.io/p/web%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%88%9D%E6%AD%A5%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/","title":"web渗透测试初步之信息搜集"},{"content":"02. 选择结构与循环结构复习补充 本章节使用的思维导图 补充 运算符的优先级 低 -\u0026gt; 高\n赋值运算符 -\u0026gt; \u0026amp;\u0026amp;和|| -\u0026gt; 关系运算符 -\u0026gt; 算术运算符 -\u0026gt; !(非)\n条件运算符 对于条件运算符m=表达式1?表达式2:表达式3，会先求解表达式1，若表达式1为真则求解表达式2不求解表达式3，并把表达式2的值传给m；若表达式1为假，则不求解表达式2而求解表达式3，并把表达式3的值传给m。 条件运算符优先于赋值运算符，因此赋值表达式的求解过程是先求解条件表达式再赋值 也可以不在条件表达式开头进行赋值，如 1 2 a\u0026gt;b ? (max=a):(max=b); a\u0026gt;b ? printf(\u0026#34;%d\u0026#34;, a):printf(\u0026#34;%d\u0026#34;, b); switch语句结构 1 2 3 4 5 6 7 8 9 10 // 表达式的值应为整数或字符(整型) switch(表达式){ // 各个case无顺序影响，但case之间应该互斥 case a: 语句1; case b: 语句2; ... case n: 语句n; // default可以省略，此时如果没有case匹配表达式的值则跳出switch default: 语句n+1; } 一般情况下在执行一个case子句之后应用break语句使流程跳出switch，最后一个default中可以不加break 在case子句中如果包含了多个执行语句可以不用加花括号 多个case标号可以共用一组执行语句，如： 1 2 3 case \u0026#39;A\u0026#39;: case \u0026#39;B\u0026#39;: case \u0026#39;C\u0026#39;: printf(\u0026#34;XXXXXX\u0026#34;);break; ","date":"2023-03-25T18:07:32+08:00","image":"https://joker0ops.github.io/img/41.jpg","permalink":"https://joker0ops.github.io/p/c%E8%AF%AD%E8%A8%80%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84%E4%B8%8E%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0%E8%A1%A5%E5%85%85/","title":"C语言选择结构与循环结构复习补充"},{"content":"01. 程序设计与算法 程序初探 C语言程序的结构的特点 （1）一个程序由一个或多个源程序文件组成，而源程序文件一般包括[预处理指令]、[全局声明]、[函数定义]\n（2）函数是C程序的主要组成部分\n（3）一个函数包含函数首部与函数体两个部分\n（4）程序总是从main函数开始执行的\n（5）程序中要求计算机完成的操作是由函数中的C语句完成的\n（6）每个数据声明和语句的后面必须跟一个分号\n（7）C语言本身不提供输入输出语句\n示例程序：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include\u0026lt;stdio.h\u0026gt; // 预处理指令，在C语言进行编译的时候会先从当前目录寻找文件，再去系统指定的目录寻找文件 int main(){ int a, b,c; // 该函数在主函数内部定义，并不是全局声明，只能在主函数内部使用 int max(int x, int y); scanf(\u0026#34;%d, %d\u0026#34;, \u0026amp;a, \u0026amp;b); c = max(a, b); printf(\u0026#34;%d\u0026#34;, c); // 对于返回值要视系统而定 // 对于Linux系统必须有返回值来标识程序的退出状态(0为正常)，Windows则不需要 return 0; } int max(int x, int y){ if(x\u0026gt;y) return x; else return y; } C语言程序的执行步骤 上机输入和编辑源程序 对源程序进行编译，先用C编译系统提供的“预处理器”对程序中的预处理指令进行编译预处理，若未发现任何语法错误则继续进行正式编译将源程序转换为二进制形式的目标程序。 通过连接编辑程序把所有编译后得到的目标模块连接装配起来，再与函数库相连接成一个整体，生成可执行程序。 在C语言程序中，函数是程序的基本单位，在一个源程序文件中包含若干函数（只有一个main函数）在进行编译时以源程序文件为对象进行编译。在分别对各源程序文件编译并得到相应的目标程序后，再将这些目标程序连接成为统一的二进制的可执行程序 不同编译系统所提供的库函数和功能不完全相同 在进行预处理操作时，会将头文件内容完整地读进来并与其他部分组成一个完整的，可以用来进行正式编译的源程序，再检查源程序语法，如出错则抛出错误提示，无错误则编译程序自动把源程序转换为当前目录下的二进制目标程序 必须把所有源程序文件编译后得到的目标文件连接装配起来，再与函数库相连接成一个整体，生成一个可供计算机执行的目标程序，称为可执行程序 程序设计的任务 问题分析 算法设计 编写程序 对源程序进行编辑、编译和链接得到可执行程序 运行程序并分析结构 编写程序文档 本章节使用的思维导图 ","date":"2023-03-25T18:07:32+08:00","image":"https://joker0ops.github.io/img/32.jpg","permalink":"https://joker0ops.github.io/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%AE%97%E6%B3%95/","title":"程序设计与算法"},{"content":"03. GitHub 团队内协作 在团队内协作时，对于岳不群所拥有的远程库，岳不群可以通过pull命令更新自己的本地库，也可以通过push命令用自己的本地库来更新远程库。而对于其弟子令狐冲来说，他并没有本地库，因此他可以通过clone命令克隆一个远程库到本地，在得到师父的许可后，他才可以通过push命令用自己的本地库来更新远程库。\n团队间合作 在进行团队间合作时，由于岳不群和令狐冲同属于一个团队，因此他们对岳不群远程库都拥有pull的权限。然而东方不败是另一团队的大佬，他们不能在同一团队下工作，因此岳不群请东方不败帮忙就只能让东方不败fork岳不群的远程库从而形成东方不败的远程库，然后东方不败clone到本地后进行更改，并将更改结果通过push命令提交到东方不败远程库。然后东方不败向岳不群发送拉取请求，请求岳不群拉取自己的代码，岳不群审核之后再通过merge合并到自己的仓库中。\npull、fork、fetch和clone的区别 首先，pull是一个远程到本地的操作，即当本地拥有远程仓库的拉取权限并且连接到远程仓库时，pull将拉取远程仓库到本地并更新本地仓库文件。 相比之下fork操作是远程到远程的操作，fork操作会在自己的账号下克隆一个与目标仓库完全相同的仓库，从而获得对该仓库的控制权。 fetch操作可以看做是安全的pull，pull操作会直接将拉取的分支与当前分支合并，而fetch拉取分支后会在本地形成一个新分支，需要开发者自行进行merge操作合并分支，pull=fetch+merge。 clone操作虽然也是远程到本地，但clone操作不需要本地有Git仓库，也不需要远程仓库的拉取权限，也不需要提前连接远程仓库，可以直接把一个完整的仓库克隆到本地，一般用于拉到本地参观或修改别人的代码，而pull用于更新自己本地的代码。clone是把整个仓库拉到本地文件夹中，包括以仓库命名的文件夹、仓库别名、分支等等，而pull只拉取仓库中的文件并与本地库进行对比，然后更新本地库。 每次从本地仓库push到远程仓库之前要先进行git pull操作，这样可以保证git push到远程仓库时没有版本冲突。 Ed25519好于rsa https://gitclone.com/ 镜像加速 搜索github项目时可以使用 username/项目名 来精准定位项目\n","date":"2023-03-25T10:32:54+08:00","image":"https://joker0ops.github.io/img/3.png","permalink":"https://joker0ops.github.io/p/git%E5%AD%A6%E4%B9%A0%E7%AF%87%E4%B8%89/","title":"Git学习篇三"},{"content":"02. Git分支 分支的概念 有时在版本控制的过程中，我们需要同时推进多个任务，因此我们可以为每个任务创建单独的分支。这使得程序员可以将自己的工作从开发主线上分离出来，在开发自己的分支时不会影响主线分支的运行（分支底层也是指针应用）\n图片介绍\n每个圆点代表分支中的一个版本 从图中可以看到，紧急修复分支、背景颜色更改分支、游戏分支都是从主分支中产生出来并且不会影响到主分支的进行，当次要分支结束任务后会合并到主分支 在整个的开发过程中，主分支和其他分支都是同步进行的 分支的优点\n可以同时并行开发多个功能，提高开发效率 各个分支在开发的过程中，如果一个分支开发失败，不会对其他分支产生任何影响。失败的分支删除重新开始即可。 分支操作 查看分支\n基本语法 git branch -v 案例实操 1 2 3 joker@joker-virtual-machine:~/Code/PHP$ git branch -v * master 8af7820 Second submit // 代表该分支有两个版本 创建分支\n基本语法 git branch 分支名 案例实操 1 2 3 4 5 joker@joker-virtual-machine:~/Code/PHP$ git branch hotfix joker@joker-virtual-machine:~/Code/PHP$ git branch -v hotfix 8af7820 Second submit * master 8af7820 Second submit // 创建了紧急修复分支且当前使用的是master分支 切换分支\n基本语法 git checkout 分支名 案例实操 1 2 3 4 5 joker@joker-virtual-machine:~/Code/PHP$ git checkout hotfix 切换到分支 \u0026#39;hotfix\u0026#39; joker@joker-virtual-machine:~/Code/PHP$ git branch -v * hotfix 8af7820 Second submit master 8af7820 Second submit 分支修改\n基本语法 切换分支后直接按照之前的流程修改提交即可 案例实操 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 joker@joker-virtual-machine:~/Code/PHP$ git checkout hotfix 切换到分支 \u0026#39;hotfix\u0026#39; joker@joker-virtual-machine:~/Code/PHP$ ls Hello.txt joker@joker-virtual-machine:~/Code/PHP$ vim Hello.txt joker@joker-virtual-machine:~/Code/PHP$ git status 位于分支 hotfix 尚未暂存以备提交的变更： （使用 \u0026#34;git add \u0026lt;文件\u0026gt;...\u0026#34; 更新要提交的内容） （使用 \u0026#34;git checkout -- \u0026lt;文件\u0026gt;...\u0026#34; 丢弃工作区的改动） 修改： Hello.txt 修改尚未加入提交（使用 \u0026#34;git add\u0026#34; 和/或 \u0026#34;git commit -a\u0026#34;） joker@joker-virtual-machine:~/Code/PHP$ git add Hello.txt joker@joker-virtual-machine:~/Code/PHP$ git commit -m \u0026#34;The hotfix-submit\u0026#34; Hello.txt [hotfix 1a7c417] The hotfix-submit 1 file changed, 1 insertion(+), 1 deletion(-) joker@joker-virtual-machine:~/Code/PHP$ cat Hello.txt Hello World! Hello World! Hello World! Hello World! hotfix vim Hello World! 222 joker@joker-virtual-machine:~/Code/PHP$ git branch -v * hotfix 1a7c417 The hotfix-submit master 8af7820 Second submit joker@joker-virtual-machine:~/Code/PHP$ git checkout master 切换到分支 \u0026#39;master\u0026#39; joker@joker-virtual-machine:~/Code/PHP$ cat Hello.txt Hello World! Hello World! Hello World! Hello World! Hello World! 222 // 可以看出在hotfix分支上修改的文件在master分支中并没有发生变化 分支合并\n基本语法 (1) 正常合并：将分支B合并到分支A-\u0026gt;切换到分支A，使用git merge B将分支B合并到分支A，进行正常合并需要保证分支B当前版本从分支A分离出来后的后续版本，并且分支A在分离节点后不再进行修改。 (2)冲突合并：分支B从分离版本分离出来后，分支A和分支B都进行了版本迭代，此时需要用户自行选择两个版本之间需要保留的部分。 案例实操 (1)正常合并 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 joker@joker-virtual-machine:~/Code/PHP(*hotfix) $ git checkout master 切换到分支 \u0026#39;master\u0026#39; joker@joker-virtual-machine:~/Code/PHP(*master) $ git merge hotfix 更新 8af7820..1a7c417 Fast-forward Hello.txt | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-) // 表示一个文件被修改，一行新增一行删除 joker@joker-virtual-machine:~/Code/PHP(*master) $ cat Hello.txt Hello World! Hello World! Hello World! Hello World! hotfix vim Hello World! 222 (2)冲突合并\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 joker@joker-virtual-machine:~/Code/PHP(*master) $ cat Hello.txt Hello World! Hello World! Hello World! Hello World! hotfix vim Hello World! 222 joker@joker-virtual-machine:~/Code/PHP(*master) $ git checkout hotfix 切换到分支 \u0026#39;hotfix\u0026#39; joker@joker-virtual-machine:~/Code/PHP(*hotfix) $ cat Hello.txt Hello World! Hello World! Hello World! Hello World! hotfix vim Hello World! 222 joker@joker-virtual-machine:~/Code/PHP(*hotfix) $ vim Hello.txt joker@joker-virtual-machine:~/Code/PHP(*hotfix) $ git status 位于分支 hotfix 尚未暂存以备提交的变更： （使用 \u0026#34;git add \u0026lt;文件\u0026gt;...\u0026#34; 更新要提交的内容） （使用 \u0026#34;git checkout -- \u0026lt;文件\u0026gt;...\u0026#34; 丢弃工作区的改动） 修改： Hello.txt 修改尚未加入提交（使用 \u0026#34;git add\u0026#34; 和/或 \u0026#34;git commit -a\u0026#34;） joker@joker-virtual-machine:~/Code/PHP(*hotfix) $ git commit -m \u0026#34;hotfix_submit2\u0026#34; Hello.txt [hotfix b25e7aa] hotfix_submit2 1 file changed, 1 insertion(+), 1 deletion(-) joker@joker-virtual-machine:~/Code/PHP(*hotfix) $ git checkout master 切换到分支 \u0026#39;master\u0026#39; joker@joker-virtual-machine:~/Code/PHP(*master) $ vim Hello.txt joker@joker-virtual-machine:~/Code/PHP(*master) $ git status 位于分支 master 尚未暂存以备提交的变更： （使用 \u0026#34;git add \u0026lt;文件\u0026gt;...\u0026#34; 更新要提交的内容） （使用 \u0026#34;git checkout -- \u0026lt;文件\u0026gt;...\u0026#34; 丢弃工作区的改动） 修改： Hello.txt 修改尚未加入提交（使用 \u0026#34;git add\u0026#34; 和/或 \u0026#34;git commit -a\u0026#34;） joker@joker-virtual-machine:~/Code/PHP(*master) $ git add Hello.txt joker@joker-virtual-machine:~/Code/PHP(*master) $ git commit -m \u0026#34;master_submit\u0026#34; Hello.txt [master 63b7f47] master_submit 1 file changed, 1 insertion(+), 1 deletion(-) joker@joker-virtual-machine:~/Code/PHP(*master) $ git merge hotfix 自动合并 Hello.txt 冲突（内容）：合并冲突于 Hello.txt 自动合并失败，修正冲突然后提交修正的结果。 joker@joker-virtual-machine:~/Code/PHP(*master) $ git status 位于分支 master 您有尚未合并的路径。 （解决冲突并运行 \u0026#34;git commit\u0026#34;） （使用 \u0026#34;git merge --abort\u0026#34; 终止合并） 未合并的路径： （使用 \u0026#34;git add \u0026lt;文件\u0026gt;...\u0026#34; 标记解决方案） 双方修改： Hello.txt 修改尚未加入提交（使用 \u0026#34;git add\u0026#34; 和/或 \u0026#34;git commit -a\u0026#34;） joker@joker-virtual-machine:~/Code/PHP(*master) $ cat Hello.txt Hello World! Hello World! Hello World! \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD Hello World! hotfix vim Hello World! master vim ======= Hello World! hotfix vim2 Hello World! \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; hotfix 222 joker@joker-virtual-machine:~/Code/PHP(*master) $ vim Hello.txt joker@joker-virtual-machine:~/Code/PHP(*master) $ git add Hello.txt joker@joker-virtual-machine:~/Code/PHP(*master) $ git commit -m \u0026#34;merge hot_fix\u0026#34; [master e06d4d5] merge hot_fix joker@joker-virtual-machine:~/Code/PHP(*master) $ git status 位于分支 master 无文件要提交，干净的工作区 joker@joker-virtual-machine:~/Code/PHP(*master) $ cat Hello.txt Hello World! Hello World! Hello World! Hello World! hotfix vim Hello World! master vim 222 ","date":"2023-03-25T10:32:47+08:00","image":"https://joker0ops.github.io/img/2.png","permalink":"https://joker0ops.github.io/p/git%E5%AD%A6%E4%B9%A0%E7%AF%87%E4%BA%8C/","title":"Git学习篇二"},{"content":"01. Git介绍 Git Git是一个免费开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目 GitHub是Git的一个官方的代码托管中心，具有代码推送(PUSH)，代码拉取(PULL)，代码克隆(CLONE)，ssh免密登录等功能 码云是国内GitHub，可以连接GitHub仓库 GitLab是一个基于局域网的代码托管中心 Git介绍 方便公司内部的团队协作，通过版本控制记录文件内容变化，记录文件修改的历史纪录 版本控制工具分类：\n集中式版本控制工具：如CVS、SVN等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连接到这台服务器，取出最新的文件或者提交更新。可以看出该类工具存在中央服务器的单点故障问题。 分布式版本控制工具：每个人在本地库中把代码仓库完整地克隆下来，每个人都可以在自己本地进行代码的版本控制，这样任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复。因为每个客户端的一次文件提取操作，实际上都是一次对整个仓库的完整备份。 Git的历史 由Linux的创始人林纳斯使用C语言开发，一个月后Linux代码统一由Git管理\nGit的工作机制和代码托管中心 在项目开发中，代码存放的目录称为工作区，工作区中的代码可以通过git add命令临时存储到本地仓库的暂存区（此时还可以修改或删除），暂存区中的文件可以通过git commit命令导入本地库形成历史版本，此时该历史版本已经生成且不可修改，用户可以登录本地库切换各个历史版本进行查看。 代码托管中心是基于网络服务器的远程代码仓库，一般称为远程库，可以通过push操作将本地库中的代码导入到远程库，远程库分类：\n局域网：GitLab 互联网：GitHub，Gitee Git常用命令 git config \u0026ndash;global user.name 用户名\t设置用户签名\ngit config \u0026ndash;global user.email 邮箱\t设置用户签名\ngit init 初始化本地仓库\ngit status\t查看本地库状态\ngit add 文件名\t添加到暂存区\ngit commit -m \u0026ldquo;日志信息\u0026rdquo; 文件名\t提交到本地库\ngit reflog/git log\t查看历史记录\ngit reset \u0026ndash;hard 版本号\t版本穿梭\nGit在首次安装时必须设置一下用户签名，用来区分文件的提交者，这里设置的用户签名和邮箱与将来登录GitHub和其他代码托管中心的账号没有任何关系。用户签名设置好之后会在Git的配置文件～/.gitconfig中显示。\nGit在设置好本地用户签名后，如需管理某一个项目，需要在项目目录下使用git init命令初始化形成一个本地库（在项目目录下生成.git目录）\ngit status可以查看当前目录本地库的状态，标红的文件代表未添加到暂存区（未被追踪），标绿的代表已经添加到暂存区（已追踪）\ngit add 文件名将文件添加到暂存区后，可以通过git rm \u0026ndash;cached 将对文件的追踪从暂存区中删除\n提交本地库示例：git commit -m \u0026ldquo;First submit\u0026rdquo; Hello.txt，提交本地库之后可以使用git查看命令查看本地库的提交历史记录\n1 2 3 4 5 6 7 8 joker@joker-virtual-machine:~/Code/PHP$ git log commit 6c16e7171e29f124258b5c5bc421124056d98a72 (HEAD -\u0026gt; master) Author: Joker \u0026lt;3099215660@qq.com\u0026gt; Date: Tue Jan 3 11:34:30 2023 +0800 My first submit joker@joker-virtual-machine:~/Code/PHP$ git reflog 6c16e71 (HEAD -\u0026gt; master) HEAD@{0}: commit (initial): My first submit 下面的6c16e71是精简版版本号，上面commit后面是完整版版本号，HEAD -\u0026gt; master代表当前工作指针指向master分支，当前分支指向版本号为6c16e71的文件。\n文件修改后，对文件的追踪会再次消失，需要我们再次提交到暂存区或本地库\n多次提交后，可以通过git reset \u0026ndash;hard 版本号来切换版本（输入完命令，选中版本号，点击鼠标滚轮可以直接粘贴）\n注意： .git文件夹的HEAD文件中通过refs/heads/master可以看到当前指针指向master分支 通过.get/refs/heads文件夹中的master文件可以看到当前位于master分支的哪一个版本\n","date":"2023-03-25T10:32:40+08:00","image":"https://joker0ops.github.io/img/1.jpg","permalink":"https://joker0ops.github.io/p/git%E5%AD%A6%E4%B9%A0%E7%AF%87%E4%B8%80/","title":"Git学习篇一"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://joker0ops.github.io/p/markdown-syntax-guide/pawel_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://joker0ops.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nbilibilibi Shortcode Gist Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","image":"https://joker0ops.github.io/p/rich-content/matt_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://joker0ops.github.io/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://joker0ops.github.io/p/placeholder-text/matt_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://joker0ops.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","image":"https://joker0ops.github.io/p/math-typesetting/the_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://joker0ops.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil:\n🙉 :hear_no_evil:\n🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://joker0ops.github.io/p/emoji-support/the_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://joker0ops.github.io/p/emoji-support/","title":"Emoji Support"}]