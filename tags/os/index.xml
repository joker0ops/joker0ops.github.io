<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>OS on 木木龙的个人博客</title>
        <link>https://joker0ops.github.io/tags/os/</link>
        <description>Recent content in OS on 木木龙的个人博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>木木龙的个人博客</copyright>
        <lastBuildDate>Mon, 18 Aug 2025 09:47:50 +0800</lastBuildDate><atom:link href="https://joker0ops.github.io/tags/os/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Linux的信号</title>
        <link>https://joker0ops.github.io/p/linux%E7%9A%84%E4%BF%A1%E5%8F%B7/</link>
        <pubDate>Mon, 18 Aug 2025 09:47:50 +0800</pubDate>
        
        <guid>https://joker0ops.github.io/p/linux%E7%9A%84%E4%BF%A1%E5%8F%B7/</guid>
        <description>&lt;h1 id=&#34;信号的基本概念&#34;&gt;信号的基本概念&lt;/h1&gt;
&lt;p&gt;信号（&lt;strong&gt;signal&lt;/strong&gt;）是软件中断，是进程之间相互传递消息的一种方法，用于通知进程发生了事件。但是，不能使用信号给进程传递任何数据。
信号产生的原因有很多，在&lt;strong&gt;Shell&lt;/strong&gt;中，可以用&lt;strong&gt;kill&lt;/strong&gt;和&lt;strong&gt;killall&lt;/strong&gt;命令发送信号：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kill -信号类型 进程编号&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;killall -信号类型 进程名&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;信号的类型以下仅列出最需要关注的信号类型&#34;&gt;信号的类型(以下仅列出最需要关注的信号类型)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;信号名&lt;/th&gt;
&lt;th&gt;信号值&lt;/th&gt;
&lt;th&gt;默认处理动作&lt;/th&gt;
&lt;th&gt;发出信号的原因&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SIGINT&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;键盘中断 &lt;code&gt;Ctrl+c&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SIGKILL&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;AEF&lt;/td&gt;
&lt;td&gt;采用 &lt;code&gt;kill -9 进程编号&lt;/code&gt; 强制杀死程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SIGSEGV&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;CEF&lt;/td&gt;
&lt;td&gt;无效的内存引用（数组越界、操作空指针和野指针等）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SIGALRM&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;由闹钟 &lt;code&gt;alarm()&lt;/code&gt; 函数发出的信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SIGTERM&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;采用 &lt;code&gt;kill 进程编号&lt;/code&gt; 或 &lt;code&gt;killall 进程名&lt;/code&gt; 通知程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SIGCHLD&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;子进程结束信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;其他&lt;/td&gt;
&lt;td&gt;≤64&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;自定义信号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;默认处理动作的含义如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A 终止进程。&lt;/li&gt;
&lt;li&gt;B 忽略此信号，将该信号丢弃，不做处理。&lt;/li&gt;
&lt;li&gt;C 终止进程并进行内核映像转储（core dump）。&lt;/li&gt;
&lt;li&gt;D 停止进程，进入停止状态的程序还能重新继续，一般是在调试的过程中。&lt;/li&gt;
&lt;li&gt;E 信号不能被捕获。&lt;/li&gt;
&lt;li&gt;F 信号不能被忽略。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;信号的作用&#34;&gt;信号的作用&lt;/h2&gt;
&lt;p&gt;当服务程序运行时，使用信号直接杀掉该进程可能会导致一些资源未能来得及释放从而造成内存占用等一系列问题。如果向服务程序发送一个信号，服务程序收到信号后能够去主动调用退出处理函数，就能使进程有计划地退出。如果向进程发送0信号，可以检测进程是否存活。&lt;/p&gt;
&lt;h2 id=&#34;发送信号&#34;&gt;发送信号&lt;/h2&gt;
&lt;p&gt;在程序中，可以使用&lt;code&gt;kill()&lt;/code&gt;函数向其他进程发送信号。
函数声明：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;kill&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pid_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// kill 函数可以将信号sig发送给指定的进程pid
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;参数&lt;code&gt;pid&lt;/code&gt;的几种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pid&amp;gt;0&lt;/code&gt; 将信号传递给进程号为pid的进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pid=0&lt;/code&gt; 将信号传递给和当前进程同进程组的所有进程，常用于父进程给子进程发送信号。（&lt;strong&gt;信号发送进程也会收到自己发出的信号&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pid=-1&lt;/code&gt; 将信号广播给系统内的所有进程。（示例：关机）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参数&lt;code&gt;sig&lt;/code&gt;说明：准备发送的信号代码，若sig=0不发出任何信号，但系统会执行错误检查，通常会利用&lt;code&gt;sig&lt;/code&gt;值为零来检查某个进程是否仍在运行。
返回值说明：成功执行时，返回0；失败返回-1，errno被设置。&lt;/p&gt;
&lt;h2 id=&#34;进程终止&#34;&gt;进程终止&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;正常终止&lt;/th&gt;
&lt;th&gt;异常终止&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;main&lt;/code&gt;函数&lt;code&gt;return&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;调用&lt;code&gt;abort&lt;/code&gt;函数中止&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;exit()&lt;/code&gt;函数调用&lt;/td&gt;
&lt;td&gt;接收到中止信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_exit()/Exit()&lt;/code&gt;函数调用&lt;/td&gt;
&lt;td&gt;在最后一个线程中对取消请求做出响应&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最后一个线程从其启动例程中&lt;code&gt;return&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;在最后一个线程中调用&lt;code&gt;pthread exit()&lt;/code&gt;返回&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;进程终止状态&#34;&gt;进程终止状态&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;main()&lt;/code&gt;函数中，&lt;code&gt;return&lt;/code&gt;的返回值即终止状态，如果没有&lt;code&gt;return&lt;/code&gt;语句或调用&lt;code&gt;exit()&lt;/code&gt;，那么该进程的终止状态是0。该性质常用于服务程序的调度、日志和监控。在&lt;code&gt;Shell&lt;/code&gt;中，程序运行结束时可以使用&lt;code&gt;echo $?&lt;/code&gt;查看进程终止的状态。
正常进程终止的三个函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_Exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// status 表示进程终止状态
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中，&lt;code&gt;exit()&lt;/code&gt;和&lt;code&gt;_Exit()&lt;/code&gt;是由&lt;code&gt;ISO C&lt;/code&gt;说明的，&lt;code&gt;_exit()&lt;/code&gt;是由&lt;code&gt;POSIX&lt;/code&gt;说明的。&lt;/p&gt;
&lt;h2 id=&#34;资源释放的问题&#34;&gt;资源释放的问题&lt;/h2&gt;
&lt;p&gt;当进程使用&lt;code&gt;return&lt;/code&gt;语句返回时，会调用局部对象的析构函数。&lt;code&gt;main()&lt;/code&gt;函数中的&lt;code&gt;return&lt;/code&gt;还会调用全局对象的析构函数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;exit()&lt;/code&gt;表示终止进程，不会调用局部对象的析构函数，只调用全局对象的析构函数。&lt;code&gt;exit()&lt;/code&gt;会执行清理工作然后退出，&lt;code&gt;_exit()&lt;/code&gt;和&lt;code&gt;_Exit()&lt;/code&gt;则不执行清理工作直接退出。&lt;/p&gt;
&lt;h2 id=&#34;进程的终止函数&#34;&gt;进程的终止函数&lt;/h2&gt;
&lt;p&gt;进程可以使用atexit()函数登记终止函数（最多32个），这些函数将由exit()自动调用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;atexit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;调用终止函数的顺序的顺序与登记时相反。进程退出前的收尾工作。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
